{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOunIexvuvIL+dXXtew3QzR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Prayag79/testRepo/blob/main/soc_financePortfolioManagementUsingDRl_Assignment1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PrG3AeRji-Q4",
        "outputId": "f2d18b6a-0fe3-4f02-a6ca-f64fe4ab9a10"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for ta (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ],
      "source": [
        "!pip install yfinance ta --quiet"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import ta\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "metadata": {
        "id": "Ek_9BL7lkvOh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = yf.download(\"RELIANCE.NS\", start=\"2019-01-01\", end=\"2024-06-01\", auto_adjust=False)\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "OOy7_oKLk1TT",
        "outputId": "2de1f1b5-bf0a-48d8-a9db-849e21f1bcd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close       Close        High         Low        Open  \\\n",
              "Ticker     RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS   \n",
              "Date                                                                     \n",
              "2019-01-01  505.240967  512.483459  515.363647  507.500366  514.426453   \n",
              "2019-01-02  498.660645  505.808868  515.226501  503.340149  509.511902   \n",
              "2019-01-03  492.508545  499.568542  509.557617  498.357056  506.311737   \n",
              "2019-01-04  495.167725  502.265808  504.917389  494.242554  501.694366   \n",
              "2019-01-07  497.917023  505.054535  511.317719  503.340149  506.083160   \n",
              "\n",
              "Price           Volume  \n",
              "Ticker     RELIANCE.NS  \n",
              "Date                    \n",
              "2019-01-01     9746670  \n",
              "2019-01-02    15628818  \n",
              "2019-01-03    16288287  \n",
              "2019-01-04    18516544  \n",
              "2019-01-07    12060290  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7768639e-bcc9-40b4-94e5-b2b9233b2548\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>505.240967</td>\n",
              "      <td>512.483459</td>\n",
              "      <td>515.363647</td>\n",
              "      <td>507.500366</td>\n",
              "      <td>514.426453</td>\n",
              "      <td>9746670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-02</th>\n",
              "      <td>498.660645</td>\n",
              "      <td>505.808868</td>\n",
              "      <td>515.226501</td>\n",
              "      <td>503.340149</td>\n",
              "      <td>509.511902</td>\n",
              "      <td>15628818</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-03</th>\n",
              "      <td>492.508545</td>\n",
              "      <td>499.568542</td>\n",
              "      <td>509.557617</td>\n",
              "      <td>498.357056</td>\n",
              "      <td>506.311737</td>\n",
              "      <td>16288287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-04</th>\n",
              "      <td>495.167725</td>\n",
              "      <td>502.265808</td>\n",
              "      <td>504.917389</td>\n",
              "      <td>494.242554</td>\n",
              "      <td>501.694366</td>\n",
              "      <td>18516544</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-07</th>\n",
              "      <td>497.917023</td>\n",
              "      <td>505.054535</td>\n",
              "      <td>511.317719</td>\n",
              "      <td>503.340149</td>\n",
              "      <td>506.083160</td>\n",
              "      <td>12060290</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7768639e-bcc9-40b4-94e5-b2b9233b2548')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7768639e-bcc9-40b4-94e5-b2b9233b2548 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7768639e-bcc9-40b4-94e5-b2b9233b2548');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8f00fa16-6439-4195-a09a-2a8d41d72cad\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f00fa16-6439-4195-a09a-2a8d41d72cad')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8f00fa16-6439-4195-a09a-2a8d41d72cad button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1336,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1336,\n        \"samples\": [\n          \"2022-08-19 00:00:00\",\n          \"2023-04-20 00:00:00\",\n          \"2024-01-30 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264.595631920249,\n        \"min\": 398.4462890625,\n        \"max\": 1502.30126953125,\n        \"num_unique_values\": 1317,\n        \"samples\": [\n          636.238525390625,\n          1071.2537841796875,\n          916.1026611328125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264.20185946842315,\n        \"min\": 404.1579284667969,\n        \"max\": 1507.4000244140625,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          1090.8702392578125,\n          1066.7337646484375,\n          746.5682983398438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 265.412967259746,\n        \"min\": 434.30804443359375,\n        \"max\": 1512.449951171875,\n        \"num_unique_values\": 1253,\n        \"samples\": [\n          1110.55322265625,\n          1427.074951171875,\n          1252.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 262.8225787104308,\n        \"min\": 400.3177185058594,\n        \"max\": 1487.2249755859375,\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          624.85498046875,\n          1160.3720703125,\n          564.6461791992188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 264.0052142742795,\n        \"min\": 418.8558044433594,\n        \"max\": 1505.7750244140625,\n        \"num_unique_values\": 1201,\n        \"samples\": [\n          735.5806884765625,\n          1265.625,\n          694.8928833007812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15734484,\n        \"min\": 1705656,\n        \"max\": 142683366,\n        \"num_unique_values\": 1336,\n        \"samples\": [\n          9460724,\n          7007330,\n          14093978\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "close = pd.Series(df['Close'].values.flatten(), index=df.index)\n",
        "high = pd.Series(df['High'].values.flatten(), index=df.index)\n",
        "low = pd.Series(df['Low'].values.flatten(), index=df.index)\n",
        "print(f\"Close shape: {close.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ogVEL95Bk3RE",
        "outputId": "bc0a92ef-a542-446b-882a-29d77d0186e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Close shape: (1336,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['RSI'] = ta.momentum.RSIIndicator(close=close).rsi()\n",
        "df['MACD'] = ta.trend.MACD(close=close).macd()\n",
        "df['EMA'] = ta.trend.EMAIndicator(close=close, window=14).ema_indicator()\n",
        "df['ADX'] = ta.trend.ADXIndicator(high=high, low=low, close=close).adx()\n",
        "bb = ta.volatility.BollingerBands(close=close)\n",
        "df['BB_high'] = bb.bollinger_hband()\n",
        "df['BB_low'] = bb.bollinger_lband()\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 371
        },
        "id": "46eB0WWKk8yd",
        "outputId": "933e94d6-4752-4d81-e7fb-4db8d9d990b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close       Close        High         Low        Open  \\\n",
              "Ticker     RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS   \n",
              "Date                                                                     \n",
              "2019-02-05  582.108765  590.453186  596.327820  584.532898  590.658936   \n",
              "2019-02-06  590.536926  599.002197  602.385254  591.687561  592.601868   \n",
              "2019-02-07  581.590454  589.927490  604.008179  587.961670  599.002197   \n",
              "2019-02-08  575.866516  584.121460  594.544861  581.629883  587.367310   \n",
              "2019-02-11  564.846741  572.943726  583.344299  571.915100  583.298584   \n",
              "\n",
              "Price           Volume        RSI       MACD         EMA        ADX  \\\n",
              "Ticker     RELIANCE.NS                                                \n",
              "Date                                                                  \n",
              "2019-02-05    20479210  75.478586  17.252482  560.546673   0.000000   \n",
              "2019-02-06    20586783  77.652205  18.785690  565.674077   0.000000   \n",
              "2019-02-07    20150710  70.507644  19.048930  568.907865  45.454577   \n",
              "2019-02-08    14230054  66.304301  18.574932  570.936344  44.837707   \n",
              "2019-02-11    16457901  59.010602  17.100215  571.203995  43.269609   \n",
              "\n",
              "Price          BB_high      BB_low  \n",
              "Ticker                              \n",
              "Date                                \n",
              "2019-02-05  603.486327  488.478367  \n",
              "2019-02-06  609.653743  491.431420  \n",
              "2019-02-07  612.543557  496.903181  \n",
              "2019-02-08  612.611283  505.048449  \n",
              "2019-02-11  609.543590  515.268507  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8defe249-0493-4a25-ab4a-ae458d83236b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>RSI</th>\n",
              "      <th>MACD</th>\n",
              "      <th>EMA</th>\n",
              "      <th>ADX</th>\n",
              "      <th>BB_high</th>\n",
              "      <th>BB_low</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-02-05</th>\n",
              "      <td>582.108765</td>\n",
              "      <td>590.453186</td>\n",
              "      <td>596.327820</td>\n",
              "      <td>584.532898</td>\n",
              "      <td>590.658936</td>\n",
              "      <td>20479210</td>\n",
              "      <td>75.478586</td>\n",
              "      <td>17.252482</td>\n",
              "      <td>560.546673</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>603.486327</td>\n",
              "      <td>488.478367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-06</th>\n",
              "      <td>590.536926</td>\n",
              "      <td>599.002197</td>\n",
              "      <td>602.385254</td>\n",
              "      <td>591.687561</td>\n",
              "      <td>592.601868</td>\n",
              "      <td>20586783</td>\n",
              "      <td>77.652205</td>\n",
              "      <td>18.785690</td>\n",
              "      <td>565.674077</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>609.653743</td>\n",
              "      <td>491.431420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-07</th>\n",
              "      <td>581.590454</td>\n",
              "      <td>589.927490</td>\n",
              "      <td>604.008179</td>\n",
              "      <td>587.961670</td>\n",
              "      <td>599.002197</td>\n",
              "      <td>20150710</td>\n",
              "      <td>70.507644</td>\n",
              "      <td>19.048930</td>\n",
              "      <td>568.907865</td>\n",
              "      <td>45.454577</td>\n",
              "      <td>612.543557</td>\n",
              "      <td>496.903181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-08</th>\n",
              "      <td>575.866516</td>\n",
              "      <td>584.121460</td>\n",
              "      <td>594.544861</td>\n",
              "      <td>581.629883</td>\n",
              "      <td>587.367310</td>\n",
              "      <td>14230054</td>\n",
              "      <td>66.304301</td>\n",
              "      <td>18.574932</td>\n",
              "      <td>570.936344</td>\n",
              "      <td>44.837707</td>\n",
              "      <td>612.611283</td>\n",
              "      <td>505.048449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-11</th>\n",
              "      <td>564.846741</td>\n",
              "      <td>572.943726</td>\n",
              "      <td>583.344299</td>\n",
              "      <td>571.915100</td>\n",
              "      <td>583.298584</td>\n",
              "      <td>16457901</td>\n",
              "      <td>59.010602</td>\n",
              "      <td>17.100215</td>\n",
              "      <td>571.203995</td>\n",
              "      <td>43.269609</td>\n",
              "      <td>609.543590</td>\n",
              "      <td>515.268507</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8defe249-0493-4a25-ab4a-ae458d83236b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8defe249-0493-4a25-ab4a-ae458d83236b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8defe249-0493-4a25-ab4a-ae458d83236b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0cd0845c-9057-4109-b641-a72d99cc628b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0cd0845c-9057-4109-b641-a72d99cc628b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0cd0845c-9057-4109-b641-a72d99cc628b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1311,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-05 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          \"2023-08-18 00:00:00\",\n          \"2023-06-09 00:00:00\",\n          \"2019-12-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259.5195579527788,\n        \"min\": 398.4462890625,\n        \"max\": 1502.30126953125,\n        \"num_unique_values\": 1293,\n        \"samples\": [\n          900.6618041992188,\n          879.7618408203125,\n          968.7978515625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259.07002411996575,\n        \"min\": 404.1579284667969,\n        \"max\": 1507.4000244140625,\n        \"num_unique_values\": 1286,\n        \"samples\": [\n          1484.7750244140625,\n          792.810546875,\n          1207.0528564453125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 260.1280152605734,\n        \"min\": 434.30804443359375,\n        \"max\": 1512.449951171875,\n        \"num_unique_values\": 1228,\n        \"samples\": [\n          1105.70751953125,\n          984.7944946289062,\n          675.2346801757812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.7415825869861,\n        \"min\": 400.3177185058594,\n        \"max\": 1487.2249755859375,\n        \"num_unique_values\": 1236,\n        \"samples\": [\n          660.6054077148438,\n          1170.84814453125,\n          1468.9000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.7874519675404,\n        \"min\": 418.8558044433594,\n        \"max\": 1505.7750244140625,\n        \"num_unique_values\": 1177,\n        \"samples\": [\n          554.9771118164062,\n          1109.445556640625,\n          585.1729125976562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15808319,\n        \"min\": 1705656,\n        \"max\": 142683366,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          18639978,\n          5877018,\n          12990426\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"RSI\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.233393662319687,\n        \"min\": 16.99059731790497,\n        \"max\": 82.6429955687806,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          57.21246074549236,\n          55.49722157056557,\n          67.88892488017021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"MACD\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.96432729132735,\n        \"min\": -60.662703469929625,\n        \"max\": 55.015069929342076,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          11.842792271268536,\n          8.723156413928109,\n          21.250498713733577\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"EMA\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.19091232271245,\n        \"min\": 485.9113655217347,\n        \"max\": 1480.9250031141262,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1268.9034094837762,\n          1143.5103318419885,\n          704.2189769030956\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"ADX\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.012279997640807,\n        \"min\": 0.0,\n        \"max\": 67.82938168116611,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          24.934972428202734,\n          39.83021357635142,\n          42.50579538094877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_high\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261.6230411021624,\n        \"min\": 558.0515136815027,\n        \"max\": 1521.6875682007767,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1290.418991170589,\n          1165.2094509437097,\n          740.7800041097331\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_low\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.34608637436745,\n        \"min\": 371.36551445343366,\n        \"max\": 1449.9290518811222,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1234.1534941809737,\n          1115.5158054039466,\n          640.2829902750326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Close', 'RSI', 'MACD', 'EMA', 'ADX', 'BB_high', 'BB_low']\n",
        "scaler = MinMaxScaler()\n",
        "df_scaled = df.copy()\n",
        "df_scaled[features] = scaler.fit_transform(df_scaled[features])\n",
        "df_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "0OvikUsLlBq_",
        "outputId": "ac70125d-a200-4739-ddbe-1d195770ce91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close       Close        High         Low        Open  \\\n",
              "Ticker     RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS RELIANCE.NS   \n",
              "Date                                                                     \n",
              "2019-02-05  582.108765    0.168862  596.327820  584.532898  590.658936   \n",
              "2019-02-06  590.536926    0.176611  602.385254  591.687561  592.601868   \n",
              "2019-02-07  581.590454    0.168385  604.008179  587.961670  599.002197   \n",
              "2019-02-08  575.866516    0.163122  594.544861  581.629883  587.367310   \n",
              "2019-02-11  564.846741    0.152991  583.344299  571.915100  583.298584   \n",
              "\n",
              "Price           Volume       RSI      MACD       EMA       ADX   BB_high  \\\n",
              "Ticker     RELIANCE.NS                                                     \n",
              "Date                                                                       \n",
              "2019-02-05    20479210  0.890874  0.673554  0.075009  0.000000  0.047149   \n",
              "2019-02-06    20586783  0.923982  0.686808  0.080162  0.000000  0.053549   \n",
              "2019-02-07    20150710  0.815158  0.689083  0.083412  0.670131  0.056548   \n",
              "2019-02-08    14230054  0.751133  0.684986  0.085451  0.661037  0.056619   \n",
              "2019-02-11    16457901  0.640038  0.672237  0.085720  0.637918  0.053435   \n",
              "\n",
              "Price         BB_low  \n",
              "Ticker                \n",
              "Date                  \n",
              "2019-02-05  0.108582  \n",
              "2019-02-06  0.111320  \n",
              "2019-02-07  0.116393  \n",
              "2019-02-08  0.123945  \n",
              "2019-02-11  0.133421  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9db96af1-6f90-4b90-b78a-e6e736b35231\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>RSI</th>\n",
              "      <th>MACD</th>\n",
              "      <th>EMA</th>\n",
              "      <th>ADX</th>\n",
              "      <th>BB_high</th>\n",
              "      <th>BB_low</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th>RELIANCE.NS</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-02-05</th>\n",
              "      <td>582.108765</td>\n",
              "      <td>0.168862</td>\n",
              "      <td>596.327820</td>\n",
              "      <td>584.532898</td>\n",
              "      <td>590.658936</td>\n",
              "      <td>20479210</td>\n",
              "      <td>0.890874</td>\n",
              "      <td>0.673554</td>\n",
              "      <td>0.075009</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.047149</td>\n",
              "      <td>0.108582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-06</th>\n",
              "      <td>590.536926</td>\n",
              "      <td>0.176611</td>\n",
              "      <td>602.385254</td>\n",
              "      <td>591.687561</td>\n",
              "      <td>592.601868</td>\n",
              "      <td>20586783</td>\n",
              "      <td>0.923982</td>\n",
              "      <td>0.686808</td>\n",
              "      <td>0.080162</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.053549</td>\n",
              "      <td>0.111320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-07</th>\n",
              "      <td>581.590454</td>\n",
              "      <td>0.168385</td>\n",
              "      <td>604.008179</td>\n",
              "      <td>587.961670</td>\n",
              "      <td>599.002197</td>\n",
              "      <td>20150710</td>\n",
              "      <td>0.815158</td>\n",
              "      <td>0.689083</td>\n",
              "      <td>0.083412</td>\n",
              "      <td>0.670131</td>\n",
              "      <td>0.056548</td>\n",
              "      <td>0.116393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-08</th>\n",
              "      <td>575.866516</td>\n",
              "      <td>0.163122</td>\n",
              "      <td>594.544861</td>\n",
              "      <td>581.629883</td>\n",
              "      <td>587.367310</td>\n",
              "      <td>14230054</td>\n",
              "      <td>0.751133</td>\n",
              "      <td>0.684986</td>\n",
              "      <td>0.085451</td>\n",
              "      <td>0.661037</td>\n",
              "      <td>0.056619</td>\n",
              "      <td>0.123945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-11</th>\n",
              "      <td>564.846741</td>\n",
              "      <td>0.152991</td>\n",
              "      <td>583.344299</td>\n",
              "      <td>571.915100</td>\n",
              "      <td>583.298584</td>\n",
              "      <td>16457901</td>\n",
              "      <td>0.640038</td>\n",
              "      <td>0.672237</td>\n",
              "      <td>0.085720</td>\n",
              "      <td>0.637918</td>\n",
              "      <td>0.053435</td>\n",
              "      <td>0.133421</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9db96af1-6f90-4b90-b78a-e6e736b35231')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9db96af1-6f90-4b90-b78a-e6e736b35231 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9db96af1-6f90-4b90-b78a-e6e736b35231');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4e6c24ad-3c49-4378-9136-0cc844890860\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e6c24ad-3c49-4378-9136-0cc844890860')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4e6c24ad-3c49-4378-9136-0cc844890860 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_scaled",
              "summary": "{\n  \"name\": \"df_scaled\",\n  \"rows\": 1311,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-05 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          \"2023-08-18 00:00:00\",\n          \"2023-06-09 00:00:00\",\n          \"2019-12-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259.5195579527788,\n        \"min\": 398.4462890625,\n        \"max\": 1502.30126953125,\n        \"num_unique_values\": 1293,\n        \"samples\": [\n          900.6618041992188,\n          879.7618408203125,\n          968.7978515625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23482608674166186,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1286,\n        \"samples\": [\n          0.979492261867896,\n          0.35228225956561077,\n          0.7277595107437721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 260.1280152605734,\n        \"min\": 434.30804443359375,\n        \"max\": 1512.449951171875,\n        \"num_unique_values\": 1228,\n        \"samples\": [\n          1105.70751953125,\n          984.7944946289062,\n          675.2346801757812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257.7415825869861,\n        \"min\": 400.3177185058594,\n        \"max\": 1487.2249755859375,\n        \"num_unique_values\": 1236,\n        \"samples\": [\n          660.6054077148438,\n          1170.84814453125,\n          1468.9000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 258.7874519675404,\n        \"min\": 418.8558044433594,\n        \"max\": 1505.7750244140625,\n        \"num_unique_values\": 1177,\n        \"samples\": [\n          554.9771118164062,\n          1109.445556640625,\n          585.1729125976562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"RELIANCE.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15808319,\n        \"min\": 1705656,\n        \"max\": 142683366,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          18639978,\n          5877018,\n          12990426\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"RSI\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18633582303532265,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.6126488064288029,\n          0.5865227360852278,\n          0.7752698898792534\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"MACD\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15529627484548783,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.6267884798485813,\n          0.5998201542518157,\n          0.7081153083828196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"EMA\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2584797862118058,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.7869158917827769,\n          0.6608944254386592,\n          0.2194016274084385\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"ADX\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14760977838046369,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          0.36761314654776395,\n          0.5872118039284869,\n          0.6266575682607346\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_high\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2714956957818246,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.7600042298691698,\n          0.6300697596512181,\n          0.18962396598930453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_low\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2367464479499772,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.7999417278515082,\n          0.689945714950895,\n          0.24932928519255482\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_size = int(len(df_scaled) * 0.7)\n",
        "val_size = int(len(df_scaled) * 0.15)\n",
        "train = df_scaled[:train_size]\n",
        "val = df_scaled[train_size:train_size + val_size]\n",
        "test = df_scaled[train_size + val_size:]\n",
        "print(f\"Train shape: {train.shape}\")\n",
        "print(f\"Validation shape: {val.shape}\")\n",
        "print(f\"Test shape: {test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9xsCis4lFPb",
        "outputId": "b103f062-c9ec-4136-82e7-e5562835aae0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train shape: (917, 12)\n",
            "Validation shape: (196, 12)\n",
            "Test shape: (198, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(df.index, df['Close'], label='Close Price')\n",
        "plt.plot(df.index, df['RSI'], label='RSI')\n",
        "plt.plot(df.index, df['MACD'], label='MACD')\n",
        "plt.title(\"RELIANCE: Close Price vs RSI & MACD\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Value\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "aDhmZV7mlH5M",
        "outputId": "90a1294d-02d2-454f-e409-3a183da5a378"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "plt.hist(df['Close'], bins=50, alpha=0.5, label='Raw Close')\n",
        "plt.hist(df_scaled['Close'], bins=50, alpha=0.5, label='Normalized Close')\n",
        "plt.title(\"Close Price Distribution: Raw vs Normalized\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "D9XOMsWulLwi",
        "outputId": "d2eacdaa-0f1e-436b-f4ce-4209045bb77a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA9EAAAIQCAYAAACG8+3WAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAWzRJREFUeJzt3XmcjfX///HnGbMxY2YswyBjxr5kCWGy1zAflYQPQkI++VRkK5VPKfQptNGCKKFPJBJFRZOsWbJEZJelsmWbsc04Zt6/P/zmfB0zxnXGzJxzZh73221uda7rOtf1us7rOpd5zrXZjDFGAAAAAADgpnzcXQAAAAAAAN6CEA0AAAAAgEWEaAAAAAAALCJEAwAAAABgESEaAAAAAACLCNEAAAAAAFhEiAYAAAAAwCJCNAAAAAAAFhGiAQAAAACwiBANAC6KiopSr1693F1Gjjh48KBsNpumT5/u7lJuymazacSIETm+nOXLl8tms2n58uWOYS1atNDtt9+e48uWvKsn8H4ZbW8jRoyQzWbL9Vpy6zsOAK4iRAPA/7d//379+9//Vvny5RUYGKiQkBA1btxY77zzji5duuTu8iyJioqSzWZz/JQoUUJNmzbV/Pnz3V1apq6t28fHR2FhYapZs6b69u2r9evXZ9tyZs2apfHjx2fb/LKTJ9d2veu3s6CgIDVo0ECffPKJu0vLFS1atJDNZlPbtm3TjUsLoW+++aYbKgMA5AZfdxcAAJ7gm2++UadOnRQQEKBHHnlEt99+uy5fvqzVq1dr6NCh+u233zRlyhR3l2lJnTp19PTTT0uSjhw5osmTJ6tDhw6aNGmSHn/88UzfW65cOV26dEl+fn65UaqTa+s+d+6cdu7cqblz5+rDDz/U4MGD9fbbbztNf+nSJfn6uvbP2KxZs7R9+3YNGjTI8nuaNWumS5cuyd/f36VluepGtbmzJ5m5tl9Hjx7VRx99pJ49eyo5OVmPPfaYm6vLHYsWLdKmTZtUr149d5eSo1588UU9//zz7i4DADwGIRpAvnfgwAE99NBDKleunH788UeVKlXKMa5fv37at2+fvvnmGzdW6JoyZcro4Ycfdrx+5JFHVLFiRY0bN+6GIfrKlStKTU2Vv7+/AgMDc6tUJ9fXLUljx45Vt27dNG7cOFWqVElPPPGEY1xO15mUlCR/f3/5+Pi47TORrp7S6s7l38j1/erVq5fKly+vcePG5YsQHRkZqXPnzmnkyJH6+uuvc2w5126H7uLr6+vyH6wAIC/jdG4A+d7rr7+u8+fPa+rUqU4BOk3FihU1cODATOfx+++/q1OnTipatKgKFSqkRo0aZRi833vvPdWoUUOFChVSkSJFVL9+fc2aNctpmr/++kuPPvqoSpYsqYCAANWoUUMff/xxltcvIiJC1apV04EDByQ5n246fvx4VahQQQEBAdqxY8cNr7/dtWuXOnfurPDwcBUsWFBVqlTRCy+8kKN1S1LBggX1v//9T0WLFtWrr74qY4xj3PXXS547d06DBg1SVFSUAgICVKJECbVq1UqbN2+WdPUU3G+++UaHDh1ynIYcFRUl6f+ue549e7ZefPFFlSlTRoUKFVJiYmKG10Sn2bRpk+666y4VLFhQ0dHR+uCDD5zGT58+XTabTQcPHnQafv08M6vtRj358ccf1bRpUwUFBSksLEzt2rXTzp07naZJu5Z137596tWrl8LCwhQaGqrevXvr4sWLTtOePHlSu3btSjfcqvDwcFWtWlX79+93Gr5q1Sp16tRJkZGRCggIUNmyZTV48GCnSyS+/vpr2Ww2/frrr45h8+bNk81mU4cOHZzmV61aNXXp0uWGdfTv31/BwcEZrkfXrl0VERGhlJQUSdLGjRsVFxen4sWLO3r46KOPWlrfwoULa/DgwVq4cKFjG8uMlX1EZtthr169FBwcrMOHD+v+++9XcHCwypQpowkTJkiStm3bprvvvltBQUEqV65cuv3K6dOn9cwzz6hmzZoKDg5WSEiI2rRpo61bt9609uuvie7Vq5fT6fzX/lz7nUxOTtbLL7+sihUrOnr/7LPPKjk52Wn+ycnJGjx4sMLDw1W4cGE98MAD+vPPP29aFwC4C39WBJDvLVy4UOXLl9ddd92VpfcfP35cd911ly5evKgBAwaoWLFimjFjhh544AF98cUXat++vSTpww8/1IABA/TPf/5TAwcOVFJSkn799VetX79e3bp1c8yrUaNGstls6t+/v8LDw/Xdd9+pT58+SkxMdOk05DR2u11//PGHihUr5jR82rRpSkpKUt++fRUQEKCiRYsqNTU13ft//fVXNW3aVH5+furbt6+ioqK0f/9+LVy4UK+++mqO1Z0mODhY7du319SpU7Vjxw7VqFEjw+kef/xxffHFF+rfv7+qV6+uU6dOafXq1dq5c6fq1q2rF154QQkJCfrzzz81btw4x7yv9corr8jf31/PPPOMkpOTMz2F+8yZM7r33nvVuXNnde3aVXPmzNETTzwhf39/y0EsjZXarvXDDz+oTZs2Kl++vEaMGKFLly7pvffeU+PGjbV582ZHAE/TuXNnRUdHa/To0dq8ebM++ugjlShRQmPHjnVM8/7772vkyJFatmyZWrRo4VL90tWzGf78808VKVLEafjcuXN18eJFPfHEEypWrJh+/vlnvffee/rzzz81d+5cSVKTJk1ks9m0cuVK1apVS9LV8O3j46PVq1c75vX3339r165d6t+//w3r6NKliyZMmOC4RCPNxYsXtXDhQvXq1UsFChTQiRMn1Lp1a4WHh+v5559XWFiYDh48qC+//NLyOg8cOFDjxo3TiBEjMj0abXUfkeZG22FKSoratGmjZs2a6fXXX9fMmTPVv39/BQUF6YUXXlD37t3VoUMHffDBB3rkkUcUExOj6OhoSVdD/IIFC9SpUydFR0fr+PHjmjx5spo3b64dO3aodOnSltf73//+t2JjY52GLV68WDNnzlSJEiUkSampqXrggQe0evVq9e3bV9WqVdO2bds0btw47dmzRwsWLHC891//+pc+/fRTdevWTXfddZd+/PFH3XfffZbrAYBcZwAgH0tISDCSTLt27Sy/p1y5cqZnz56O14MGDTKSzKpVqxzDzp07Z6Kjo01UVJRJSUkxxhjTrl07U6NGjUzn3adPH1OqVClz8uRJp+EPPfSQCQ0NNRcvXrxpba1btzZ///23+fvvv83WrVvNQw89ZCSZp556yhhjzIEDB4wkExISYk6cOOH0/rRx06ZNcwxr1qyZKVy4sDl06JDTtKmpqdla93333XfD8ePGjTOSzFdffeUYJsm8/PLLjtehoaGmX79+mS7nvvvuM+XKlUs3fNmyZUaSKV++fLpa08YtW7bMMax58+ZGknnrrbccw5KTk02dOnVMiRIlzOXLl40xxkybNs1IMgcOHLjpPG9UW0Y9SVvOqVOnHMO2bt1qfHx8zCOPPOIY9vLLLxtJ5tFHH3WaZ/v27U2xYsWchqVNe21NN3L9drZt2zbTo0cPIyldDzLq/ejRo43NZnPapmrUqGE6d+7seF23bl3TqVMnI8ns3LnTGGPMl19+aSSZrVu33rC21NRUU6ZMGdOxY0en4XPmzDGSzMqVK40xxsyfP99IMhs2bLjp+l6vefPmju/yyJEjjSSzadMmY8z/9euNN95wTG91H5HZdtizZ08jybz22muOYWfOnDEFCxY0NpvNzJ492zF8165d6b4fSUlJjuWkOXDggAkICDCjRo1yGnb99pa2bdzI3r17TWhoqGnVqpW5cuWKMcaY//3vf8bHx8dpnY0x5oMPPjCSzE8//WSMMWbLli1GknnyySedpuvWrVu6dQAAT8Hp3ADytcTERElXT83Mqm+//VYNGjRQkyZNHMOCg4PVt29fHTx4UDt27JAkhYWF6c8//9SGDRsynI8xRvPmzVPbtm1ljNHJkycdP3FxcUpISLB02uj333+v8PBwhYeHq3bt2po7d6569OjhdNRRkjp27Kjw8PBM5/X3339r5cqVevTRRxUZGek0Lu30zuyqOzNpR2XPnTt3w2nCwsK0fv16HTlyJMvL6dmzpwoWLGhpWl9fX/373/92vPb399e///1vnThxQps2bcpyDTdz9OhRbdmyRb169VLRokUdw2vVqqVWrVrp22+/Tfee66+Fb9q0qU6dOuXY/qWrp+waYywfhb52O6tZs6b+97//qXfv3nrjjTecprv287xw4YJOnjypu+66S8YY/fLLL041rVq1StLVPm/dulV9+/ZV8eLFHcNXrVqlsLCwTB8vZrPZ1KlTJ3377bc6f/68Y/jnn3+uMmXKOL6nYWFhkq7eHMxut1ta54wMHDhQRYoU0ciRI284jdV9RJrMtsN//etfjv8PCwtTlSpVFBQUpM6dOzuGV6lSRWFhYfr9998dwwICAhzXVaekpOjUqVMKDg5WlSpVbun7eeHCBbVv315FihTRZ599pgIFCki6egZCtWrVVLVqVad9wt133y1JWrZsmeOzkaQBAwY4zfdWzl4BgJxGiAaQr4WEhEjKPJzdzKFDh1SlSpV0w6tVq+YYL0nPPfecgoOD1aBBA1WqVEn9+vXTTz/95Jj+77//1tmzZzVlyhRHOEn76d27tyTpxIkTN62nYcOGio+P1w8//KA1a9bo5MmT+uSTT9L9Up52mmdm0n4Jzyy0ZFfdmUkLQ5n9seP111/X9u3bVbZsWTVo0EAjRoxwChFWWPlM0pQuXVpBQUFOwypXrixJ6a6Bzk5p29ONtrmTJ0/qwoULTsOv/wNI2inXZ86cyXIdadvZ4sWL9eabbyosLExnzpxJdwr84cOHHYE/ODhY4eHhat68uSQpISHBMV3Tpk119OhR7du3T2vWrJHNZlNMTIxTuF61apUaN25805tsdenSRZcuXXKcYn3+/Hl9++236tSpk+OPP82bN1fHjh01cuRIFS9eXO3atdO0adPSXa97M6GhoRo0aJC+/vprpz8KXMvqPiLNjbbDwMDAdH/4Cg0N1W233ZbuOc6hoaFO/U1NTXXcoC8gIEDFixdXeHi4fv31V6c+uOqxxx7T/v37NX/+fKdLRvbu3avffvst3T4h7TuStk84dOiQfHx8VKFCBaf5ZvR5AYCn4JpoAPlaSEiISpcure3bt+f4sqpVq6bdu3dr0aJFWrx4sebNm6eJEyfqpZde0siRIx3XIz/88MPq2bNnhvNIu140M8WLF093vWJGrB5xvZnsqjszaf2pWLHiDafp3Lmz45nY33//vd544w2NHTtWX375pdq0aWNpOdn1maS5PtikSbuxVW5JOzp4PXPNjdpcde12FhcXp6pVq+r+++/XO++8oyFDhki6up6tWrXS6dOn9dxzz6lq1aoKCgrSX3/9pV69ejldg592lHblypX6/fffVbduXQUFBalp06Z69913df78ef3yyy+O6/Az06hRI0VFRWnOnDnq1q2bFi5cqEuXLjndkMxms+mLL77QunXrtHDhQi1ZskSPPvqo3nrrLa1bty7Ta9Kvl3Zt9MiRI7PlWd832g5v1Ecr/X3ttdc0fPhwPfroo3rllVdUtGhR+fj4aNCgQRneC8GKd955R5999pk+/fRT1alTx2lcamqqatasme7RdGnKli2bpWUCgCcgRAPI9+6//35NmTJFa9euVUxMjMvvL1eunHbv3p1u+K5duxzj0wQFBalLly7q0qWLLl++rA4dOujVV1/VsGHDHHemTUlJsRSCc0P58uUlKdM/MuR03efPn9f8+fNVtmxZx5G7GylVqpSefPJJPfnkkzpx4oTq1q2rV1991RGibxRqs+LIkSO6cOGC09HoPXv2SJLjxl5pR3zPnj3r9N7rjzy6Ulva9nSjba548eLpjpDnhvvuu0/NmzfXa6+9pn//+98KCgrStm3btGfPHs2YMUOPPPKIY9r4+Ph074+MjFRkZKRWrVql33//XU2bNpV09TndQ4YM0dy5c5WSkqJmzZpZqqdz58565513lJiYqM8//1xRUVFq1KhRuukaNWqkRo0a6dVXX9WsWbPUvXt3zZ492+m06ZtJOxo9YsSIDP+Q5Mo+Iqd88cUXatmypaZOneo0/OzZsypevLjL81u1apWeeeYZDRo0SN27d083vkKFCtq6davuueeeTLftcuXKKTU1Vfv373c6+pzR5wUAnoLTuQHke88++6yCgoL0r3/9S8ePH083fv/+/XrnnXdu+P57771XP//8s9auXesYduHCBU2ZMkVRUVGqXr26JOnUqVNO7/P391f16tVljJHdbleBAgXUsWNHzZs3L8PQ+vfff2d1FbMsPDxczZo108cff6zDhw87jUs7ypWTdV+6dEk9evTQ6dOn9cILL2R6ZPf6U1JLlCih0qVLO52eGxQUdEunrl7rypUrmjx5suP15cuXNXnyZIWHh6tevXqS5DhFdeXKlU61TpkyJd38rNZWqlQp1alTRzNmzHAK59u3b9f333+ve++9N0vrc6uPuJKuXrJw6tQpffjhh5L+7wjptUdEjTE3/D41bdpUP/74o37++WdHiK5Tp44KFy6sMWPGqGDBgo7P9ma6dOmi5ORkzZgxQ4sXL3a6Zli6eir79Ufi046munpKt3T1Gt6wsDCNGjUq3Tir+4icVKBAgXTrO3fuXP31118uz+vo0aPq3LmzmjRpku4a+DSdO3fWX3/95dgWrnXp0iXHJQdpf+B69913nabJjiP6AJBTOBININ+rUKGCZs2apS5duqhatWp65JFHdPvtt+vy5ctas2aN5s6dq169et3w/c8//7w+++wztWnTRgMGDFDRokU1Y8YMHThwQPPmzXNcv9m6dWtFRESocePGKlmypHbu3Kn3339f9913n+Na3zFjxmjZsmVq2LChHnvsMVWvXl2nT5/W5s2b9cMPP+j06dO58ZE4effdd9WkSRPVrVtXffv2VXR0tA4ePKhvvvlGW7Zsyba6//rrL3366aeSrh593rFjh+bOnatjx47p6aefdrqJ1/XOnTun2267Tf/85z9Vu3ZtBQcH64cfftCGDRv01ltvOaarV6+ePv/8cw0ZMkR33nmngoOD1bZt2yx9LqVLl9bYsWN18OBBVa5cWZ9//rm2bNmiKVOmyM/PT5JUo0YNNWrUSMOGDdPp06dVtGhRzZ49W1euXEk3P1dqe+ONN9SmTRvFxMSoT58+jkdchYaGOj2n1xW3+ogr6Woguv322/X222+rX79+qlq1qipUqKBnnnlGf/31l0JCQjRv3rwbXovdtGlTzZw5UzabzXF6d4ECBXTXXXdpyZIlatGiRaaPHbtW3bp1VbFiRb3wwgtKTk5O92zpGTNmaOLEiWrfvr0qVKigc+fO6cMPP1RISEiW/hARGhqqgQMHZniDMav7iJx0//33a9SoUerdu7fuuusubdu2TTNnznScbeKKAQMG6O+//9azzz6r2bNnO42rVauWatWqpR49emjOnDl6/PHHtWzZMjVu3FgpKSnatWuX5syZoyVLlqh+/fqqU6eOunbtqokTJyohIUF33XWXli5dqn379mXXqgNA9nPHLcEBwBPt2bPHPPbYYyYqKsr4+/ubwoULm8aNG5v33nvPJCUlOaa7/hFXxhizf/9+889//tOEhYWZwMBA06BBA7No0SKnaSZPnmyaNWtmihUrZgICAkyFChXM0KFDTUJCgtN0x48fN/369TNly5Y1fn5+JiIiwtxzzz1mypQpN12Hmz0qypiMH8Fz/bhrH29jjDHbt2837du3d6xflSpVzPDhw7O1bklGkrHZbCYkJMTUqFHDPPbYY2b9+vUZvkfXPP4mOTnZDB061NSuXdsULlzYBAUFmdq1a5uJEyc6vef8+fOmW7duJiwszEhyPFIq7dFCc+fOTbecGz3iqkaNGmbjxo0mJibGBAYGmnLlypn3338/3fv3799vYmNjTUBAgClZsqT5z3/+Y+Lj49PN80a13agnP/zwg2ncuLEpWLCgCQkJMW3btjU7duxwmibt0UR///230/CMHr3l6iOubrSdTZ8+3aneHTt2mNjYWBMcHGyKFy9uHnvsMbN169YM1+m3334zkky1atWchv/3v/81ktJtczfzwgsvGEmmYsWK6cZt3rzZdO3a1URGRpqAgABTokQJc//995uNGzfedL7XPuLqWmfOnDGhoaEZfr+s7CMy2w579uxpgoKCLNdyfY+SkpLM008/bUqVKmUKFixoGjdubNauXWuaN29umjdv7pjOyiOu0h7xltHPtY+kunz5shk7dqypUaOGCQgIMEWKFDH16tUzI0eOdNrvXbp0yQwYMMAUK1bMBAUFmbZt25o//viDR1wB8Fg2Y27hriIAAAAAAOQjXBMNAAAAAIBFhGgAAAAAACwiRAMAAAAAYBEhGgAAAAAAiwjRAAAAAABYRIgGAAAAAMAiX3cXcL3U1FQdOXJEhQsXls1mc3c5AAAAAIA8zhijc+fOqXTp0vLxyfxYs8eF6CNHjqhs2bLuLgMAAAAAkM/88ccfuu222zKdxuNCdOHChSVdLT4kJMTN1WTObrfr+++/V+vWreXn5+fucuAi+ufd6J93o3/ejf55N/rn/eihd6N/nikxMVFly5Z15NHMeFyITjuFOyQkxCtCdKFChRQSEsIXwAvRP+9G/7wb/fNu9M+70T/vRw+9G/3zbFYuKebGYgAAAAAAWESIBgAAAADAIkI0AAAAAAAWedw10QAAAAC8U0pKiux2u7vL8Gh2u12+vr5KSkpSSkqKu8vJV/z9/W/6+CorCNEAAAAAbokxRseOHdPZs2fdXYrHM8YoIiJCf/zxh6WbWCH7+Pj4KDo6Wv7+/rc0H0I0AAAAgFuSFqBLlCihQoUKEQ4zkZqaqvPnzys4ODhbjorCmtTUVB05ckRHjx5VZGTkLW2jhGgAAAAAWZaSkuII0MWKFXN3OR4vNTVVly9fVmBgICE6l4WHh+vIkSO6cuXKLT1ejK4BAAAAyLK0a6ALFSrk5kqAzKWdxn2r16ITogEAAADcMk7hhqfLrm2UEA0AAAAAgEWEaAAAAADwcMuXL5fNZuMO6B6AG4sBAAAAyBHj4vfk6vIGt6rs0vS9evXSjBkzJEm+vr667bbb1KlTJ40aNUqBgYE5UeIN/fLLL3rttde0cuVKJSQkqGzZsmrRooWGDh2qypVdWy/kLI5EAwAAAMi3/vGPf+jo0aP6/fffNW7cOE2ePFkvv/xyrtawaNEiNWrUSMnJyZo5c6Z27typTz/9VKGhoRo+fHiu1oKbI0QDAAAAyLcCAgIUERGhsmXL6sEHH1RsbKzi4+Md40+dOqWuXbuqTJkyKlSokGrWrKnPPvvMMX7RokUKCwtz3PF5y5Ytstlsev755x3T/Otf/9LDDz+c4fIvXryo3r17695779XXX3+t2NhYRUdHq2HDhnrzzTc1efLkG9Y+b9481ahRQwEBAYqKitJbb73lNH7ixImqVKmSAgMDVbJkSf3zn/90jEtNTdXo0aMVHR2tggULqnbt2vriiy9c+/DyKUI0AAAAAEjavn271qxZ43gUkiQlJSWpXr16+uabb7R9+3b17dtXPXr00M8//yxJatq0qc6dO6dffvlFkrRixQoVL15cy5cvd8xjxYoVatGiRYbLXLJkiU6ePKlnn302w/FhYWEZDt+0aZM6d+6shx56SNu2bdOIESM0fPhwTZ8+XZK0ceNGDRgwQKNGjdLu3bu1ePFiNWvWzPH+0aNH65NPPtEHH3yg3377TYMHD9bDDz+sFStWWPy08i+uiQYAAACQby1atEjBwcG6cuWKkpOT5ePjo/fff98xvkyZMnrmmWccr5966iktWbJEc+bMUYMGDRQaGqo6depo+fLlql+/vpYvX67Bgwdr5MiROn/+vBISErRv3z41b948w+Xv3btXklS1alWX6n777bd1zz33OE73rly5snbs2KE33nhDvXr10uHDhxUUFKT7779fhQsXVrly5XTHHXdIkpKTk/Xaa6/phx9+UExMjCSpfPnyWr16tSZPnnzDWnEVR6IBAAAA5FstW7bUli1btH79evXs2VO9e/dWx44dHeNTUlL0yiuvqGbNmipatKiCg4O1ZMkSHT582DFN8+bNtXz5chljtGrVKnXo0EHVqlXT6tWrtWLFCpUuXVqVKlXKcPnGmCzVvXPnTjVu3NhpWOPGjbV3716lpKSoVatWKleunMqXL68ePXpo5syZunjxoiRp3759unjxolq1aqXg4GDHzyeffKL9+/dnqZ78hCPRAAAAAPKtoKAgVaxYUZL08ccfq3bt2po6dar69OkjSXrjjTf0zjvvaPz48apZs6aCgoI0aNAgXb582TGPFi1a6OOPP9bWrVvl5+enqlWrqkWLFlq+fLnOnDmT6ZHdtDtv79q1y3FUODsULlxYmzdv1vLly/X999/rpZde0ogRI7RhwwadP39ekvTNN9+oTJkyTu8LCAjIthryKo5EAwAAAIAkHx8f/ec//9GLL76oS5cuSZJ++ukntWvXTg8//LBq166t8uXLa88e50d3pV0XPW7cOEdgTgvRy5cvv+H10JLUunVrFS9eXK+//nqG42/0XOhq1arpp59+chr2008/qXLlyipQoICkq4/tio2N1euvv65ff/1VBw8e1I8//qjq1asrICBAhw8fVsWKFZ1+ypYta+Wjytc4Eg0AAAC4SVaeo9y/RXQOVII0nTp10tChQzVhwgQ988wzqlSpkr744gutWbNGRYoU0dtvv63jx4+revXqjvcUKVJEtWrV0syZMx3XUzdr1kydO3eW3W7P9Eh0UFCQPvroI3Xq1EkPPPCABgwYoIoVK+rkyZOaM2eODh8+rNmzZ6d739NPP60777xTr7zyirp06aK1a9fq/fff18SJEyVdvdb7999/V7NmzVSkSBF9++23Sk1NVZUqVVS4cGE988wzGjx4sFJTU9WkSRMlJCTop59+UkhIiHr27JnNn2rewpFoAAAAAPj/fH191b9/f73++uu6cOGCXnzxRdWtW1dxcXFq0aKFIiIi9OCDD6Z7X/PmzZWSkuI46ly0aFFVr15dERERqlKlSqbLbNeundasWSM/Pz9169ZNVatWVdeuXZWQkKD//ve/Gb6nbt26mjNnjmbPnq3bb79dL730kkaNGqVevXpJunpX7y+//FJ33323qlWrpg8++ECfffaZatSoIUl65ZVXNHz4cI0ePVrVqlXTP/7xD33zzTeKjuaPNDfDkWgAAAAAOWJwq8ruLiFTaY+Dut7zzz/veM5zUFCQFixYcNN5jR8/XuPHj3catmXLFsu11K9fX/Pmzbvh+BYtWqS7CVnHjh2dboJ2rSZNmjg9Zut6NptNAwcO1MCBAy3XiKs4Eg0AAAAAgEWEaAAAAAAALCJEAwAAAABgEddEAwAAANkkK3fbBuBdOBINAAAAAIBFhGgAAAAAACwiRAMAAAAAYBEhGgAAAAAAiwjRAAAAAABYRIgGAAAAAC+yfPly2Ww2nT17VpI0ffp0hYWF5egye/XqpQcffNBj5uNOPOIKAAAAQM5YNjp3l9dymEuT9+rVSzNmzNDo0aP1/PPPO4YvWLBA7du3lzEmuyvMEV26dNG9997r7jJkjNGHH36oqVOn6rfffpOvr68qVqyohx9+WH379lWhQoXcXWK24Eg0AAAAgHwrMDBQY8eO1ZkzZ7J1vpcvX87W+WWmYMGCKlGiRK4t70Z69OihQYMGqV27dlq2bJm2bNmi4cOH66uvvtL333/v7vKyDSEaAAAAQL4VGxuriIgIjR6d+VHzefPmqUaNGgoICFBUVJTeeustp/FRUVF65ZVX9MgjjygkJER9+/Z1nGa9aNEiValSRYUKFVKnTp108eJFzZgxQ1FRUSpSpIgGDBiglJQUx7z+97//qX79+ipcuLAiIiLUrVs3nThx4oa1XX86d1RUlGw2W7qfNH/88Yc6d+6ssLAwFS1aVO3atdPBgwcd41NSUjRkyBCFhYWpWLFievbZZ296VH7OnDmaOXOmPvvsM/3nP//RnXfeqaioKLVr104//vijWrZsmeH7kpOTNWDAAJUoUUKBgYFq0qSJNmzY4Bh/5swZde/eXeHh4SpYsKAqVaqkadOmWV6XnECIBgAAAJBvFShQQK+99pree+89/fnnnxlOs2nTJnXu3FkPPfSQtm3bphEjRmj48OGaPn2603RvvvmmateurV9++UXDhw+XJF28eFHvvvuuZs+ercWLF2vFihXq0aOHvvvuO3377bf63//+p8mTJ+uLL75wzMdut+uVV17R1q1btWDBAh08eFC9evWyvE4bNmzQ0aNHdfToUf35559q1KiRmjZt6ph3XFycChcurFWrVumnn35ScHCw/vGPfziOnr/11luaPn26Pv74Y61evVqnT5/W/PnzM13mzJkzVaVKFbVr1y7dOJvNptDQ0Azf9+yzz2revHmaMWOGNm/erIoVKyouLk6nT5+WJA0fPlw7duzQd999p507d2rSpEkqXry45XXJCVwTDQAAACBfa9++verUqaOXX35ZU6dOTTf+7bff1j333OMIxpUrV9aOHTv0xhtvOIXbu+++W08//bTj9apVq2S32zVp0iRVqFBBktSxY0d9+umnOnr0qEJCQlS9enW1bNlSy5YtU5cuXSRJjz76qGMe5cuX17vvvqs777xT58+fV3Bw8E3XJzw83PH/AwcO1NGjRx1Hdz///HOlpqbqo48+chydnjZtmsLCwrR8+XK1bt1a48eP17Bhw9ShQwdJ0gcffKAlS5Zkusy9e/eqSpUqN63tWhcuXNCkSZM0ffp0tWnTRpL04YcfKj4+XlOnTtXQoUN1+PBh3XHHHapfv76kq0fZ01hZl5zAkWgAAAAA+d7YsWM1Y8YM7dy5M924nTt3qnHjxk7DGjdurL179zqdhp0W9K5VqFAhR4CWpJIlSyoyMtIpDJcsWdLpdO1Nmzapbdu2ioyMVOHChdW8eXNJ0uHDh11apylTpmjq1Kn6+uuvHcF669at2rdvnwoXLqzg4GAFBweraNGiSkpK0v79+5WQkKCjR4+qYcOGjvn4+vpmuG7XyspN2Pbv3y+73e702fr5+alBgwaOPjzxxBOaPXu26tSpo2effVZr1qxxTHuzdckpHIkGAAAAkO81a9ZMcXFxGjZsmEunTl8rKCgo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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = yf.download(\"M&M.NS\", start=\"2019-01-01\", end=\"2024-06-01\", auto_adjust=False)\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "pmek_UE3nON9",
        "outputId": "9dff9b92-d8aa-4a1d-b49c-7fef745bcdaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close       Close        High         Low        Open  \\\n",
              "Ticker          M&M.NS      M&M.NS      M&M.NS      M&M.NS      M&M.NS   \n",
              "Date                                                                     \n",
              "2019-01-01  730.337830  773.349976  805.849976  771.299988  805.000000   \n",
              "2019-01-02  700.448181  741.700012  772.799988  735.099976  772.799988   \n",
              "2019-01-03  678.349670  718.299988  744.849976  716.200012  743.400024   \n",
              "2019-01-04  685.243652  725.599976  728.299988  712.500000  720.000000   \n",
              "2019-01-07  688.973938  729.549988  735.900024  723.549988  734.549988   \n",
              "\n",
              "Price         Volume  \n",
              "Ticker        M&M.NS  \n",
              "Date                  \n",
              "2019-01-01   3442903  \n",
              "2019-01-02  10596260  \n",
              "2019-01-03  11084172  \n",
              "2019-01-04   5919404  \n",
              "2019-01-07   2792255  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c864a3f5-ed44-4228-94ae-3a7cc551707d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>730.337830</td>\n",
              "      <td>773.349976</td>\n",
              "      <td>805.849976</td>\n",
              "      <td>771.299988</td>\n",
              "      <td>805.000000</td>\n",
              "      <td>3442903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-02</th>\n",
              "      <td>700.448181</td>\n",
              "      <td>741.700012</td>\n",
              "      <td>772.799988</td>\n",
              "      <td>735.099976</td>\n",
              "      <td>772.799988</td>\n",
              "      <td>10596260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-03</th>\n",
              "      <td>678.349670</td>\n",
              "      <td>718.299988</td>\n",
              "      <td>744.849976</td>\n",
              "      <td>716.200012</td>\n",
              "      <td>743.400024</td>\n",
              "      <td>11084172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-04</th>\n",
              "      <td>685.243652</td>\n",
              "      <td>725.599976</td>\n",
              "      <td>728.299988</td>\n",
              "      <td>712.500000</td>\n",
              "      <td>720.000000</td>\n",
              "      <td>5919404</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-07</th>\n",
              "      <td>688.973938</td>\n",
              "      <td>729.549988</td>\n",
              "      <td>735.900024</td>\n",
              "      <td>723.549988</td>\n",
              "      <td>734.549988</td>\n",
              "      <td>2792255</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c864a3f5-ed44-4228-94ae-3a7cc551707d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c864a3f5-ed44-4228-94ae-3a7cc551707d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c864a3f5-ed44-4228-94ae-3a7cc551707d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f75240e0-0ab1-4709-bc61-bbf249d41b8c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f75240e0-0ab1-4709-bc61-bbf249d41b8c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f75240e0-0ab1-4709-bc61-bbf249d41b8c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1336,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1336,\n        \"samples\": [\n          \"2022-08-19 00:00:00\",\n          \"2023-04-20 00:00:00\",\n          \"2024-01-30 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 445.47807078880686,\n        \"min\": 257.5818786621094,\n        \"max\": 2590.234130859375,\n        \"num_unique_values\": 1306,\n        \"samples\": [\n          1476.58837890625,\n          860.1578369140625,\n          1061.1756591796875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 441.920103218051,\n        \"min\": 269.0,\n        \"max\": 2609.199951171875,\n        \"num_unique_values\": 1290,\n        \"samples\": [\n          1566.0,\n          1634.25,\n          731.9500122070312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 445.86237815482656,\n        \"min\": 283.0,\n        \"max\": 2617.39990234375,\n        \"num_unique_values\": 1251,\n        \"samples\": [\n          845.9500122070312,\n          2535.0,\n          1579.050048828125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 436.8596478936298,\n        \"min\": 245.39999389648438,\n        \"max\": 2572.39990234375,\n        \"num_unique_values\": 1247,\n        \"samples\": [\n          823.25,\n          1681.6500244140625,\n          1202.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 440.94483405858284,\n        \"min\": 263.3999938964844,\n        \"max\": 2589.800048828125,\n        \"num_unique_values\": 1167,\n        \"samples\": [\n          873.4500122070312,\n          1892.0,\n          660.4000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2783573,\n        \"min\": 295788,\n        \"max\": 32986476,\n        \"num_unique_values\": 1336,\n        \"samples\": [\n          2513148,\n          2172677,\n          2569098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "close = pd.Series(df['Close'].values.flatten(), index=df.index)\n",
        "high = pd.Series(df['High'].values.flatten(), index=df.index)\n",
        "low = pd.Series(df['Low'].values.flatten(), index=df.index)\n",
        "print(f\"Close shape: {close.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7OpqfjfcpuIi",
        "outputId": "648129b6-14f0-47c8-f133-2573919827e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Close shape: (1336,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['RSI'] = ta.momentum.RSIIndicator(close=close).rsi()\n",
        "df['MACD'] = ta.trend.MACD(close=close).macd()\n",
        "df['EMA'] = ta.trend.EMAIndicator(close=close, window=14).ema_indicator()\n",
        "df['ADX'] = ta.trend.ADXIndicator(high=high, low=low, close=close).adx()\n",
        "bb = ta.volatility.BollingerBands(close=close)\n",
        "df['BB_high'] = bb.bollinger_hband()\n",
        "df['BB_low'] = bb.bollinger_lband()\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "wlYmq5lRpys7",
        "outputId": "6ff1ba12-3789-4492-ea27-bdf5f437e8a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close       Close        High         Low        Open  \\\n",
              "Ticker          M&M.NS      M&M.NS      M&M.NS      M&M.NS      M&M.NS   \n",
              "Date                                                                     \n",
              "2019-02-05  646.807251  684.900024  692.599976  672.650024  675.250000   \n",
              "2019-02-06  656.440002  695.099976  698.250000  682.049988  687.900024   \n",
              "2019-02-07  661.917480  700.900024  708.900024  693.099976  695.000000   \n",
              "2019-02-08  644.162964  682.099976  706.700012  678.549988  702.000000   \n",
              "2019-02-11  611.534546  647.549988  673.400024  645.200012  669.400024   \n",
              "\n",
              "Price         Volume        RSI       MACD         EMA        ADX     BB_high  \\\n",
              "Ticker        M&M.NS                                                            \n",
              "Date                                                                            \n",
              "2019-02-05   3550741  35.848878 -18.959542  693.579688   0.000000  752.547650   \n",
              "2019-02-06   2221744  42.310816 -17.195413  693.782393   0.000000  750.125462   \n",
              "2019-02-07   2710457  45.662597 -15.154619  694.731411  47.726478  746.467458   \n",
              "2019-02-08  10858152  37.963210 -14.882723  693.047219  45.625996  743.275466   \n",
              "2019-02-11   7931599  28.464367 -17.256220  686.980922  44.930785  743.307758   \n",
              "\n",
              "Price           BB_low  \n",
              "Ticker                  \n",
              "Date                    \n",
              "2019-02-05  657.382361  \n",
              "2019-02-06  656.684547  \n",
              "2019-02-07  657.112553  \n",
              "2019-02-08  655.724540  \n",
              "2019-02-11  647.992248  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-250ab191-5e7b-4bbb-9677-4264ae56368e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>RSI</th>\n",
              "      <th>MACD</th>\n",
              "      <th>EMA</th>\n",
              "      <th>ADX</th>\n",
              "      <th>BB_high</th>\n",
              "      <th>BB_low</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-02-05</th>\n",
              "      <td>646.807251</td>\n",
              "      <td>684.900024</td>\n",
              "      <td>692.599976</td>\n",
              "      <td>672.650024</td>\n",
              "      <td>675.250000</td>\n",
              "      <td>3550741</td>\n",
              "      <td>35.848878</td>\n",
              "      <td>-18.959542</td>\n",
              "      <td>693.579688</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>752.547650</td>\n",
              "      <td>657.382361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-06</th>\n",
              "      <td>656.440002</td>\n",
              "      <td>695.099976</td>\n",
              "      <td>698.250000</td>\n",
              "      <td>682.049988</td>\n",
              "      <td>687.900024</td>\n",
              "      <td>2221744</td>\n",
              "      <td>42.310816</td>\n",
              "      <td>-17.195413</td>\n",
              "      <td>693.782393</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>750.125462</td>\n",
              "      <td>656.684547</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-07</th>\n",
              "      <td>661.917480</td>\n",
              "      <td>700.900024</td>\n",
              "      <td>708.900024</td>\n",
              "      <td>693.099976</td>\n",
              "      <td>695.000000</td>\n",
              "      <td>2710457</td>\n",
              "      <td>45.662597</td>\n",
              "      <td>-15.154619</td>\n",
              "      <td>694.731411</td>\n",
              "      <td>47.726478</td>\n",
              "      <td>746.467458</td>\n",
              "      <td>657.112553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-08</th>\n",
              "      <td>644.162964</td>\n",
              "      <td>682.099976</td>\n",
              "      <td>706.700012</td>\n",
              "      <td>678.549988</td>\n",
              "      <td>702.000000</td>\n",
              "      <td>10858152</td>\n",
              "      <td>37.963210</td>\n",
              "      <td>-14.882723</td>\n",
              "      <td>693.047219</td>\n",
              "      <td>45.625996</td>\n",
              "      <td>743.275466</td>\n",
              "      <td>655.724540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-11</th>\n",
              "      <td>611.534546</td>\n",
              "      <td>647.549988</td>\n",
              "      <td>673.400024</td>\n",
              "      <td>645.200012</td>\n",
              "      <td>669.400024</td>\n",
              "      <td>7931599</td>\n",
              "      <td>28.464367</td>\n",
              "      <td>-17.256220</td>\n",
              "      <td>686.980922</td>\n",
              "      <td>44.930785</td>\n",
              "      <td>743.307758</td>\n",
              "      <td>647.992248</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-250ab191-5e7b-4bbb-9677-4264ae56368e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-250ab191-5e7b-4bbb-9677-4264ae56368e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-250ab191-5e7b-4bbb-9677-4264ae56368e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-731400da-8806-479f-bf5a-f41dd9358ea8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-731400da-8806-479f-bf5a-f41dd9358ea8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-731400da-8806-479f-bf5a-f41dd9358ea8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1311,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-05 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          \"2023-08-18 00:00:00\",\n          \"2023-06-09 00:00:00\",\n          \"2019-12-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.05036633822704,\n        \"min\": 257.5818786621094,\n        \"max\": 2590.234130859375,\n        \"num_unique_values\": 1281,\n        \"samples\": [\n          1957.6162109375,\n          833.808837890625,\n          1887.8272705078125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 444.6338978696353,\n        \"min\": 269.0,\n        \"max\": 2609.199951171875,\n        \"num_unique_values\": 1266,\n        \"samples\": [\n          1970.6500244140625,\n          1396.449951171875,\n          729.3499755859375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.59791524683214,\n        \"min\": 283.0,\n        \"max\": 2617.39990234375,\n        \"num_unique_values\": 1229,\n        \"samples\": [\n          808.9500122070312,\n          1711.949951171875,\n          472.45001220703125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 439.58319584100593,\n        \"min\": 245.39999389648438,\n        \"max\": 2572.39990234375,\n        \"num_unique_values\": 1222,\n        \"samples\": [\n          522.7000122070312,\n          731.0499877929688,\n          673.2999877929688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 443.7084117766996,\n        \"min\": 263.3999938964844,\n        \"max\": 2589.800048828125,\n        \"num_unique_values\": 1152,\n        \"samples\": [\n          547.5,\n          1294.0,\n          900.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2787905,\n        \"min\": 295788,\n        \"max\": 32986476,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          2202570,\n          1881329,\n          3052238\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"RSI\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.029514987336723,\n        \"min\": 12.023946977544654,\n        \"max\": 85.30286909732612,\n        \"num_unique_values\": 1309,\n        \"samples\": [\n          43.205165803604544,\n          62.737847628959116,\n          61.32729945497646\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"MACD\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.61538734317485,\n        \"min\": -61.739105137220065,\n        \"max\": 137.9065003310634,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          20.485513927808142,\n          39.59202501910181,\n          -12.483782638803405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"EMA\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 430.7920884182929,\n        \"min\": 315.18918980391976,\n        \"max\": 2456.5106932822705,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1534.773654617361,\n          1344.2543465837928,\n          547.3748275619188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"ADX\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.934178431885252,\n        \"min\": 0.0,\n        \"max\": 67.01807538358766,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          20.257389834819463,\n          20.48794798460656,\n          37.924530474398786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_high\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 449.0851521329784,\n        \"min\": 387.0248253870419,\n        \"max\": 2706.101655162081,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1596.7767693575822,\n          1419.7408408834408,\n          597.9950630228648\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_low\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 403.1894949784276,\n        \"min\": 199.3795029735454,\n        \"max\": 2064.7183399551063,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          1441.2832282010115,\n          1209.1741737649968,\n          520.004943080651\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = ['Close', 'RSI', 'MACD', 'EMA', 'ADX', 'BB_high', 'BB_low']\n",
        "scaler = MinMaxScaler()\n",
        "df_scaled = df.copy()\n",
        "df_scaled[features] = scaler.fit_transform(df_scaled[features])\n",
        "df_scaled.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "80Jg-zfrp5FS",
        "outputId": "04962be6-b0a9-4f30-9400-3157e237a1a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Price        Adj Close     Close        High         Low        Open  \\\n",
              "Ticker          M&M.NS    M&M.NS      M&M.NS      M&M.NS      M&M.NS   \n",
              "Date                                                                   \n",
              "2019-02-05  646.807251  0.177720  692.599976  672.650024  675.250000   \n",
              "2019-02-06  656.440002  0.182078  698.250000  682.049988  687.900024   \n",
              "2019-02-07  661.917480  0.184557  708.900024  693.099976  695.000000   \n",
              "2019-02-08  644.162964  0.176523  706.700012  678.549988  702.000000   \n",
              "2019-02-11  611.534546  0.161760  673.400024  645.200012  669.400024   \n",
              "\n",
              "Price         Volume       RSI      MACD       EMA       ADX   BB_high  \\\n",
              "Ticker        M&M.NS                                                     \n",
              "Date                                                                     \n",
              "2019-02-05   3550741  0.325127  0.214278  0.176709  0.000000  0.157616   \n",
              "2019-02-06   2221744  0.413309  0.223114  0.176804  0.000000  0.156571   \n",
              "2019-02-07   2710457  0.459049  0.233336  0.177247  0.712143  0.154994   \n",
              "2019-02-08  10858152  0.353980  0.234698  0.176460  0.680801  0.153617   \n",
              "2019-02-11   7931599  0.224354  0.222809  0.173627  0.670428  0.153631   \n",
              "\n",
              "Price         BB_low  \n",
              "Ticker                \n",
              "Date                  \n",
              "2019-02-05  0.245533  \n",
              "2019-02-06  0.245159  \n",
              "2019-02-07  0.245389  \n",
              "2019-02-08  0.244645  \n",
              "2019-02-11  0.240499  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-227ee0f4-ba4b-4540-9e66-7134e1cbca8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Close</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "      <th>RSI</th>\n",
              "      <th>MACD</th>\n",
              "      <th>EMA</th>\n",
              "      <th>ADX</th>\n",
              "      <th>BB_high</th>\n",
              "      <th>BB_low</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticker</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th>M&amp;M.NS</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-02-05</th>\n",
              "      <td>646.807251</td>\n",
              "      <td>0.177720</td>\n",
              "      <td>692.599976</td>\n",
              "      <td>672.650024</td>\n",
              "      <td>675.250000</td>\n",
              "      <td>3550741</td>\n",
              "      <td>0.325127</td>\n",
              "      <td>0.214278</td>\n",
              "      <td>0.176709</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.157616</td>\n",
              "      <td>0.245533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-06</th>\n",
              "      <td>656.440002</td>\n",
              "      <td>0.182078</td>\n",
              "      <td>698.250000</td>\n",
              "      <td>682.049988</td>\n",
              "      <td>687.900024</td>\n",
              "      <td>2221744</td>\n",
              "      <td>0.413309</td>\n",
              "      <td>0.223114</td>\n",
              "      <td>0.176804</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156571</td>\n",
              "      <td>0.245159</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-07</th>\n",
              "      <td>661.917480</td>\n",
              "      <td>0.184557</td>\n",
              "      <td>708.900024</td>\n",
              "      <td>693.099976</td>\n",
              "      <td>695.000000</td>\n",
              "      <td>2710457</td>\n",
              "      <td>0.459049</td>\n",
              "      <td>0.233336</td>\n",
              "      <td>0.177247</td>\n",
              "      <td>0.712143</td>\n",
              "      <td>0.154994</td>\n",
              "      <td>0.245389</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-08</th>\n",
              "      <td>644.162964</td>\n",
              "      <td>0.176523</td>\n",
              "      <td>706.700012</td>\n",
              "      <td>678.549988</td>\n",
              "      <td>702.000000</td>\n",
              "      <td>10858152</td>\n",
              "      <td>0.353980</td>\n",
              "      <td>0.234698</td>\n",
              "      <td>0.176460</td>\n",
              "      <td>0.680801</td>\n",
              "      <td>0.153617</td>\n",
              "      <td>0.244645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-11</th>\n",
              "      <td>611.534546</td>\n",
              "      <td>0.161760</td>\n",
              "      <td>673.400024</td>\n",
              "      <td>645.200012</td>\n",
              "      <td>669.400024</td>\n",
              "      <td>7931599</td>\n",
              "      <td>0.224354</td>\n",
              "      <td>0.222809</td>\n",
              "      <td>0.173627</td>\n",
              "      <td>0.670428</td>\n",
              "      <td>0.153631</td>\n",
              "      <td>0.240499</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-227ee0f4-ba4b-4540-9e66-7134e1cbca8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-227ee0f4-ba4b-4540-9e66-7134e1cbca8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-227ee0f4-ba4b-4540-9e66-7134e1cbca8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8289ad4b-ec89-4bda-b843-14bc76831ade\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8289ad4b-ec89-4bda-b843-14bc76831ade')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8289ad4b-ec89-4bda-b843-14bc76831ade button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_scaled",
              "summary": "{\n  \"name\": \"df_scaled\",\n  \"rows\": 1311,\n  \"fields\": [\n    {\n      \"column\": [\n        \"Date\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-05 00:00:00\",\n        \"max\": \"2024-05-31 00:00:00\",\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          \"2023-08-18 00:00:00\",\n          \"2023-06-09 00:00:00\",\n          \"2019-12-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Adj Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.05036633822704,\n        \"min\": 257.5818786621094,\n        \"max\": 2590.234130859375,\n        \"num_unique_values\": 1281,\n        \"samples\": [\n          1957.6162109375,\n          833.808837890625,\n          1887.8272705078125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Close\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18999825106695747,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1266,\n        \"samples\": [\n          0.7271387316976682,\n          0.48177505114778535,\n          0.19671394974408635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"High\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 448.59791524683214,\n        \"min\": 283.0,\n        \"max\": 2617.39990234375,\n        \"num_unique_values\": 1229,\n        \"samples\": [\n          808.9500122070312,\n          1711.949951171875,\n          472.45001220703125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Low\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 439.58319584100593,\n        \"min\": 245.39999389648438,\n        \"max\": 2572.39990234375,\n        \"num_unique_values\": 1222,\n        \"samples\": [\n          522.7000122070312,\n          731.0499877929688,\n          673.2999877929688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Open\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 443.7084117766996,\n        \"min\": 263.3999938964844,\n        \"max\": 2589.800048828125,\n        \"num_unique_values\": 1152,\n        \"samples\": [\n          547.5,\n          1294.0,\n          900.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"Volume\",\n        \"M&M.NS\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2787905,\n        \"min\": 295788,\n        \"max\": 32986476,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          2202570,\n          1881329,\n          3052238\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"RSI\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17780713212509774,\n        \"min\": 0.0,\n        \"max\": 1.0000000000000002,\n        \"num_unique_values\": 1309,\n        \"samples\": [\n          0.4255141577422657,\n          0.6920666841758085,\n          0.6728176541248891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"MACD\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11828653722571647,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.4118528873809384,\n          0.5075550244075859,\n          0.2467137825692916\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"EMA\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20118048024013047,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.569547572763994,\n          0.4805748016392052,\n          0.10843100271530359\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"ADX\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16315267738295836,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          0.3022675557134901,\n          0.30570779401438825,\n          0.5658851027477624\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_high\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19364824242435358,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.5216523784112369,\n          0.4453134118875126,\n          0.09097164653069642\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"BB_low\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21614812654137283,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 1311,\n        \"samples\": [\n          0.6657791606575242,\n          0.5413465107634132,\n          0.1718858974844123\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_size = int(len(df_scaled) * 0.7)\n",
        "val_size = int(len(df_scaled) * 0.15)\n",
        "train = df_scaled[:train_size]\n",
        "val = df_scaled[train_size:train_size + val_size]\n",
        "test = df_scaled[train_size + val_size:]\n",
        "print(f\"Train shape: {train.shape}\")\n",
        "print(f\"Validation shape: {val.shape}\")\n",
        "print(f\"Test shape: {test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tgTuaB9ap-M5",
        "outputId": "04b3e451-324a-4c18-f85b-8397030bda2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train shape: (917, 12)\n",
            "Validation shape: (196, 12)\n",
            "Test shape: (198, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(df.index, df['Close'], label='Close Price')\n",
        "plt.plot(df.index, df['RSI'], label='RSI')\n",
        "plt.plot(df.index, df['MACD'], label='MACD')\n",
        "plt.title(\"Mahindra&Mahindra: Close Price vs RSI & MACD\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Value\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "lRxxw2cmqD2D",
        "outputId": "87c74f2a-5d48-45ed-b00d-1b5a943ce013"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "plt.hist(df['Close'], bins=50, alpha=0.5, label='Raw Close')\n",
        "plt.hist(df_scaled['Close'], bins=50, alpha=0.5, label='Normalized Close')\n",
        "plt.title(\"Close Price Distribution: Raw vs Normalized\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "EaWotNxeqMJV",
        "outputId": "556e8cb2-2109-46b2-b5d0-d34609ad7be5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}